.. _installation:

=========================
Installation instructions
=========================

Installation
============

This document describes the steps needed to get Plata up and running.

Plata is based on Django_, so you need a working Django_ installation
first. Plata is developed using Django_ 1.2, and is not guaranteed to
work with any earlier version.

You can download a stable release of plata using ``easy_install``::

    $ sudo easy_install plata

Please note that the package installable with ``easy_install`` only
contains the files needed to run plata. It does not include documentation,
tests or the example project which comes with the development version,
which you can download using the Git_ version control system::

    $ git clone git://github.com/matthiask/plata.git

In addition, you will need FeinCMS_ with its dependencies, PDFDocument_
and cldr_countries_.

.. _Django: http://www.djangoproject.com/
.. _Git: http://git-scm.com/
.. _FeinCMS: http://www.feinheit.ch/labs/feincms-django-cms/
.. _PDFDocument: http://github.com/matthiask/pdfdocument
.. _cldr_countries: http://github.com/matthiask/cldr_countries


Configuration
=============

Adding the modules to ``INSTALLED_APPS``::
------------------------------------------

    INSTALLED_APPS = (
        ...
        'plata',
        'plata',
        'plata.contact',
        'plata.discount',
        'plata.payment',
        'plata.product',
        'plata.product.feincms', # Not strictly necessary
        'plata.product.stock', # Currently necessary, but this might change
        'plata.shop',
        'cldr_countries', # Necessary if you want translated country names
        ...
        )

You should run ``./manage.py syncdb`` after you've added the required modules
to ``INSTALLED_APPS``.


Creating the :class:`~plata.shop.views.Shop` object
---------------------------------------------------

Most of the shop logic is contained inside :class:`~plata.shop.views.Shop`.
This class implements cart handling, the checkout process and handing control
to the payment modules when the order has been confirmed. There should exist
exactly one Shop instance in your site (for now).

The Shop class requires four models and makes certain assumptions about them.
The aim is to reduce the set of assumptions made or at least make them
either configurable or overridable.

The models which need to be passed when instantiating the Shop object are

* Product
* Contact
* Order
* Discount

Example::

    from plata.contact.models import Contact
    from plata.discount.models import Discount
    from plata.product.models import Product
    from plata.shop.models import Order
    from plata.shop.views import Shop

    shop = Shop(
        product_model=Product,
        contact_model=Contact,
        order_model=Order,
        discount_model=Discount,
        )

The shop objects registers itself in a central place, and can be fetched from
anywhere using::

    import plata
    shop = plata.shop_instance()


Adding views and configuring URLs
---------------------------------

The :class:`~plata.shop.views.Shop` class itself does not define any product
views. You have to do this yourself. You may either use Django's generic views,
:class:`plata.product.feincms.content.ProductList` if you use FeinCMS, or
anything else fitting your needs.

Generic views using ``plata.shop_instance()`` could look like this::

    from django.shortcuts import get_object_or_404
    from django.views.generic import list_detail

    import plata


    def product_list(request):
        shop = plata.shop_instance()

        return list_detail.object_list(request,
            queryset=shop.product_model.objects.active(),
            paginate_by=10,
            template_name='product/product_list.html',
            )


    def product_detail(request, object_id):
        shop = plata.shop_instance()

        return shop.product_detail(request,
            get_object_or_404(shop.product_model.objects.active(), pk=object_id),
            )

``shop.product_detail`` behaves similar to Django's generic views. It handles
adding articles to the cart.

Next, you need to add the Shop's URLs to your URLconf::

    from django.conf.urls.defaults import *
    from myapp.views import shop

    urlpatterns = patterns('',
        url(r'^shop/', include(shop.urls),
        url(r'^products/$', 'myapp.views.product_list',
            name='plata_product_list'),
        url(r'^products/(?P<object_id>\d+)/$', 'myapp.views.product_detail',
            name='plata_product_detail'),
    )


Setting up logging
------------------

Plata uses Python's logging module for payment processing, warnings and
otherwise potentially interesting status changes. The logging module is
very versatile and sometimes difficult to configure, because of this an
example configuration is provided here. Put the following lines into
your ``settings.py``, adjusting the logfile path::

    import logging, os
    import logging.handlers

    LOG_FILENAME = os.path.join(APP_BASEDIR, 'log', 'plata.log')

    plata_logger = logging.getLogger('plata')
    plata_logger.setLevel(logging.DEBUG)
    plata_logging_handler = logging.handlers.RotatingFileHandler(LOG_FILENAME,
        maxBytes=10*1024*1024, backupCount=15)
    plata_logging_formatter = logging.Formatter('%(asctime)s %(levelname)s:%(name)s:%(message)s')
    plata_logging_handler.setFormatter(plata_logging_formatter)
    plata_logger.addHandler(plata_logging_handler)

